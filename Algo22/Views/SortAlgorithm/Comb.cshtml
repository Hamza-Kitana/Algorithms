<html>

<head>
    <link href="~/css/Allalgo.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.5.1/css/swiper.min.css">
    <link href="https://cdn.jsdelivr.net/npm/ionicons@7.2.2/dist/collection/components/icon/icon.min.css
" rel="stylesheet">
</head>

<body>
    <div class="*">
    </div>

    <div class="swiper">
        <div class="swiper-wrapper">

            <div class="swiper-slide">
                <div class="content">
                    <h1>The Comb Sort </h1>

                    <p>
                        Comb Sort is a relatively simple and efficient sorting algorithm that was designed to improve upon the bubble sort algorithm.
                        It was introduced by Włodzimierz Dobosiewicz in 1980.
                        Comb Sort is known for its simplicity and effectiveness,
                        especially in scenarios where other simple algorithms might be inefficient.
                    </p>

                </div>



            </div>

            <div class="swiper-slide">
                <div class="content">
                    <h1>Code :</h1>
                    <div class="content">


                        <div class="card">
                            <div class="header">
                                <div class="top">
                                    <div class="circle">
                                        <span class="red circle2"></span>
                                    </div>
                                    <div class="circle">
                                        <span class="yellow circle2"></span>
                                    </div>
                                    <div class="circle">
                                        <span class="green circle2"></span>
                                    </div>
                                    <div class="title">
                                        <p id="title2">Comb Sort Code</p>
                                    </div>
                                </div>
                            </div>
                            <div class="code-container">
                                <textarea readonly="" name="code" id="code" class="area">
public class CombSort {
public static void combSort(int[] array) {
int n = array.length;
int gap = n;
boolean swapped = true;
while (gap != 1 || swapped) {
 // Calculate the gap with the "shrink factor" (typically 1.3)
gap = (gap * 10) / 13;
if (gap < 1) {
 gap = 1;
            }
// Reset the swapped flag
   swapped = false;
// Perform a single pass with the calculated gap
   for (int i = 0; i < n - gap; i++) {
   if (array[i] > array[i + gap]) {
   // Swap elements if they are in the wrong order
   int temp = array[i];
   array[i] = array[i + gap];
   array[i + gap] = temp;
   swapped = true;
                }
            }
        }
    }

  public static void main(String[] args) {
  // Example usage:
  int[] array = {8, 4, 1, 56, 3, -44, 23, -6, 34, 2, 0};
  System.out.println("Original Array: " + Arrays.toString(array));
  // Perform Comb Sort
  combSort(array);
  System.out.println("Sorted Array: " + Arrays.toString(array));
    }
}


}</textarea>
                            </div>
                        </div>

                    </div>
                </div>
                <div class="content">
                    <h1>Pseudocode:</h1>
                    <div class="card">
                        <div class="header">
                            <div class="top">
                                <div class="circle">
                                    <span class="red circle2"></span>
                                </div>
                                <div class="circle">
                                    <span class="yellow circle2"></span>
                                </div>
                                <div class="circle">
                                    <span class="green circle2"></span>
                                </div>
                                <div class="title">
                                    <p id="title2">Comb Sort Pseudocode</p>
                                </div>
                            </div>
                        </div>
                        <div class="code-container">
                            <textarea name="code" id="code" class="area">
1 function combSort(array):
2 n = length(array)
3 gap = n
4 swapped = true
5 while gap ≠ 1 OR swapped:
6 gap = (gap * 10) / 13
7 if gap < 1:
8 gap = 1
9 swapped = false
10for i from 0 to n - gap:
11 if array[i] > array[i + gap]:
12 swap(array[i], array[i + gap])
13 swapped = true
14 # مثال على الاستخدام:
15 array = [8, 4, 1, 56, 3, -44, 23, -6, 34, 2, 0]
16 print("Original Array:", array)
17 combSort(array)
18 print("Sorted Array:", array)

</textarea>
                        </div>
                    </div>


                </div>
            </div>
            <div class="swiper-slide">
                <div class="content">
                    <h1>How To Arrange Step By Step ?</h1>
                    <p>
                        The algorithm begins by setting the gap value to the length of the list.
                        The "swapped" flag is initialized to true.
                        A filtering cycle then starts where the gap value is reduced by the shrink factor, often set to 1.3.
                        The gap value is adjusted to be at least 1.
                        The filtering cycle opens by examining elements in the list with a specific gap interval.
                        If the elements are out of order, they are swapped. It is also noted that when the gap value becomes 1, an additional cycle is performed using a gap of 1 to ensure the list is completely sorted.
                        The algorithm continues these operations until the list becomes sorted, indicated by no further exchanges.
                        The efficiency of the algorithm is determined by testing various shrink factor values.
                    </p>

                </div>
                <div class="content">

                    <p>
                        <img src="~/lib/jquery-validation-unobtrusive/gif/comb sort.gif" width="450px" height="350px" />
                    </p>

                </div>


            </div>

            <div class="swiper-slide">
                <div class="content">
                    <h1>Advantage :</h1>
                    <p class="ulAdv" style="color : #06ff06;">

                        ✅Ease of Implementation:

                        Comb Sort is relatively easy to understand and implement compared to more complex sorting algorithms.
                    </p>
                    <p class="ulAdv" style="color : #06ff06;">

                        ✅Efficiency in Some Cases:

                        In certain scenarios, Comb Sort can outperform other quadratic-time sorting algorithms, such as Bubble Sort.
                    </p>
                    <p class="ulAdv" style="color : #06ff06;">

                        ✅Adaptive Nature:

                        The algorithm dynamically adjusts the gap size during each iteration, which can contribute to its efficiency in different scenarios.
                    </p>


                </div>



                <div class="content">
                    <h1>Disadvantage :</h1>
                    <p class="uldis" style="color:#ff6548;">
                        ❌Inefficiency for Large Lists:

                        While Comb Sort can be more efficient than Bubble Sort, it may still not be as efficient as more advanced algorithms like quicksort or mergesort, especially for large lists.
                    </p>
                    <p class="uldis" style="color:#ff6548;">
                        ❌Lack of Stability:

                        Comb Sort is not a stable sorting algorithm, meaning it may not preserve the relative order of equal elements.
                    </p>
                    <p class="uldis" style="color:#ff6548;">
                        ❌Dependency on Shrink Factor:

                        The performance of Comb Sort is sensitive to the choice of the shrink factor. An inappropriate value for the shrink factor may affect the sorting efficiency.
                    </p>

                </div>


            </div>
        </div>


        <nav class="nav-carousel">

            <a class="enter-a">
                <svg xmlns="http://www.w3.org/2000/svg"
                     fill="none"
                     viewBox="0 0 40 27"
                     class="arrow">
                    <line stroke-width="2" stroke="white" y2="14" x2="40" y1="14" x1="1"></line>
                    <line stroke-width="2"
                          stroke="white"
                          y2="1.41537"
                          x2="10.4324"
                          y1="14.2433"
                          x1="1.18869"></line>
                    <line stroke-width="2"
                          stroke="white"
                          y2="13.6007"
                          x2="1.20055"
                          y1="26.2411"
                          x1="10.699"></line>
                    <line stroke="white"
                          y2="14.3133"
                          x2="1.07325"
                          y1="13.6334"
                          x1="0.33996"></line>
                    <line stroke-width="2" stroke="white" y2="13" x2="39" y1="8" x1="39"></line>
                </svg>
                Back
            </a>

            <div class="btn button-prev">
                <ion-icon name="caret-back-outline"></ion-icon><span class="btn-border"></span>
            </div>
            <div class="btn button-next">
                <ion-icon name="caret-forward-outline"></ion-icon><span class="btn-border"></span>
            </div>
            <a asp-controller="SortAlgorithm" asp-action="SizeArray" class="button" data-text="Awesome">
                <span class="actual-text">try it</span>
                <span aria-hidden="true" class="front-text">tryit  </span>
            </a>
        </nav>

    </div>

    <div id="particles-js"></div>


    <script src="https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.5.1/js/swiper.min.js"></script>
    <script src='https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js'></script>
    <script src="https://cdn.jsdelivr.net/npm/ionicons@7.2.2/dist/esm/ionicons.min.js"></script>
    <script src="https://unpkg.com/ionicons@latest/dist/ionicons.js"></script>
    <script src="~/js/SortAlgorthm.js"></script>

</body>
</html>

