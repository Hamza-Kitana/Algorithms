<html>

<head>
    <link href="~/css/Allalgo.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.5.1/css/swiper.min.css">
    <link href="https://cdn.jsdelivr.net/npm/ionicons@7.2.2/dist/collection/components/icon/icon.min.css
" rel="stylesheet">
</head>

<body>
    <div class="*">
    </div>

    <div class="swiper">
        <div class="swiper-wrapper">

            <div class="swiper-slide">
                <div class="content">
                    <h1>The Counting Sort </h1>

                    <p>
                        Counting Sort is a linear time, non-comparative sorting algorithm that sorts a collection of integers based on their individual counts.
                        It is particularly efficient when sorting a range of integers with a small, known range.
                        Counting Sort works by determining, for each element, the number of elements that are less than it,
                        enabling the determination of its correct position in the sorted sequence.
                    </p>

                </div>



            </div>

            <div class="swiper-slide">
                <div class="content">
                    <h1>Code :</h1>
                    <div class="content">


                        <div class="card">
                            <div class="header">
                                <div class="top">
                                    <div class="circle">
                                        <span class="red circle2"></span>
                                    </div>
                                    <div class="circle">
                                        <span class="yellow circle2"></span>
                                    </div>
                                    <div class="circle">
                                        <span class="green circle2"></span>
                                    </div>
                                    <div class="title">
                                        <p id="title2">Counting Sort Code</p>
                                    </div>
                                </div>
                            </div>
                            <div class="code-container">
                                <textarea readonly="" name="code" id="code" class="area">
public class CountingSort {
public static void countingSort(int[] arr) {
int max = findMax(arr);
// Create a counting array to store the count of each element
int[] count = new int[max + 1];
// Count occurrences of each element
or (int num : arr) {
  count[num]++;
        }
// Update the counting array to store the cumulative count
   for (int i = 1; i <= max; i++) {
     count[i] += count[i - 1];
        }
 // Create an output array to store the sorted elements
   int[] output = new int[arr.length];
    // Place elements in the sorted order
    for (int i = arr.length - 1; i >= 0; i--) {
    output[count[arr[i]] - 1] = arr[i];
    count[arr[i]]--;
        }
// Copy the sorted elements back to the original array
    System.arraycopy(output, 0, arr, 0, arr.length);
    }
// Helper function to find the maximum element in the array
private static int findMax(int[] arr) {
   int max = arr[0];
   for (int num : arr) {
   if (num > max) {
   max = num;
       }
        }
        return max;
    }

// Function to print an array
 private static void printArray(int[] arr) {
 for (int num : arr) {
 System.out.print(num + " ");
        }
  System.out.println();
    }

 public static void main(String[] args) {
 int[] arr = {4, 2, 2, 8, 3, 3, 1};
 System.out.println("Original Array:");
 printArray(arr);
  countingSort(arr);
  System.out.println("Sorted Array:");
  printArray(arr);
    }
}

}</textarea>
                            </div>
                        </div>

                    </div>
                </div>
                <div class="content">
                    <h1>Pseudocode:</h1>
                    <div class="card">
                        <div class="header">
                            <div class="top">
                                <div class="circle">
                                    <span class="red circle2"></span>
                                </div>
                                <div class="circle">
                                    <span class="yellow circle2"></span>
                                </div>
                                <div class="circle">
                                    <span class="green circle2"></span>
                                </div>
                                <div class="title">
                                    <p id="title2">Counting Sort Pseudocode</p>
                                </div>
                            </div>
                        </div>
                        <div class="code-container">
                            <textarea name="code" id="code" class="area">
1 procedure countingSort(arr: array of integers)
2  maxVal := findMax(arr)
3  let count be an array of maxVal + 1 elements, initialized to zero
4  // Count occurrences of each element
5  for i from 0 to length(arr) - 1
6    count[arr[i]] := count[arr[i]] + 1
7  // Calculate cumulative counts
8  for i from 1 to maxVal
9    count[i] := count[i] + count[i - 1]
10 let output be an array of the same length as arr
11     // Place elements in sorted order
12  for i from length(arr) - 1 down to 0
13    output[count[arr[i]] - 1] := arr[i]
14    count[arr[i]] := count[arr[i]] - 1
15 // Copy the sorted elements back to the original array
16 for i from 0 to length(arr) - 1
17  arr[i] := output[i]
18// Function to find the maximum element in the array
19 function findMax(arr: array of integers) returns integer
20  max := arr[0]
21  for i from 1 to length(arr) - 1
22   if arr[i] > max
23    max := arr[i]
24    return max
25 // Example usage
26 arr := [4, 2, 2, 8, 3, 3, 1]
27 print("Original Array:")
28 printArray(arr)
29 countingSort(arr)
30 print("Sorted Array:")
31 printArray(arr)
</textarea>
                        </div>
                    </div>


                </div>
            </div>
            <div class="swiper-slide">
                <div class="content">
                    <h1>How To Arrange Step By Step ?</h1>
                    <p>
                        Comparison:

                        The algorithm starts by comparing the first two elements of the list.
                        Swapping:

                        If the first element is greater than the second, they are swapped. Otherwise, they remain in their positions.
                        Iterative Process:

                        The algorithm then moves to the next pair of elements, performing comparisons and swaps iteratively.
                        Passes:

                        Each pass through the list ensures that the largest unsorted element "bubbles up" to its correct position.
                        Repeat Until Sorted:

                        The process is repeated until the entire list is sorted.
                    </p>

                </div>
                <div class="content">

                    <p>
                        <img src="~/lib/jquery-validation-unobtrusive/gif/counting sort.gif" width="450px" height="350px" />
                    </p>

                </div>


            </div>

            <div class="swiper-slide">
                <div class="content">
                    <h1>Advantage :</h1>
                    <p class="ulAdv" style="color : #06ff06;">

                        ✅Linear Time Complexity:

                        Counting Sort has a linear time complexity of O(n), where n is the number of elements in the input array. This makes it highly efficient for scenarios where the range of input values is not significantly larger than the number of elements.
                    </p>
                    <p class="ulAdv" style="color : #06ff06;">

                        ✅Stable Sorting:

                        Counting Sort is a stable sorting algorithm, meaning it preserves the relative order of equal elements in the sorted output. This is particularly useful when dealing with records that have multiple keys.
                    </p>
                    <p class="ulAdv" style="color : #06ff06;">

                        ✅No Comparison Operations:

                        Unlike comparison-based sorting algorithms, Counting Sort doesn't rely on comparison operations between elements. This can make it more efficient in certain situations.
                    </p>


                </div>



                <div class="content">
                    <h1>Disadvantage :</h1>
                    <p class="uldis" style="color:#ff6548;">
                        ❌Memory Usage:

                        Counting Sort requires additional memory for the counting array, which can be a limitation for large datasets or when dealing with a wide range of input values. This makes it less suitable for scenarios with limited memory.
                    </p>
                    <p class="uldis" style="color:#ff6548;">
                        ❌Limited Applicability:

                        Counting Sort is most effective when sorting integers with a small and known range. Its applicability is limited when dealing with complex data types or scenarios where the range of values is significantly larger than the number of elements.
                    </p>
                    <p class="uldis" style="color:#ff6548;">
                        ❌Not In-Place:

                        Counting Sort is not an in-place sorting algorithm since it requires additional arrays for counting and output. This can be a drawback when memory usage is a critical factor.
                    </p>

                </div>


            </div>
        </div>


        <nav class="nav-carousel">

            <a class="enter-a">
                <svg xmlns="http://www.w3.org/2000/svg"
                     fill="none"
                     viewBox="0 0 40 27"
                     class="arrow">
                    <line stroke-width="2" stroke="white" y2="14" x2="40" y1="14" x1="1"></line>
                    <line stroke-width="2"
                          stroke="white"
                          y2="1.41537"
                          x2="10.4324"
                          y1="14.2433"
                          x1="1.18869"></line>
                    <line stroke-width="2"
                          stroke="white"
                          y2="13.6007"
                          x2="1.20055"
                          y1="26.2411"
                          x1="10.699"></line>
                    <line stroke="white"
                          y2="14.3133"
                          x2="1.07325"
                          y1="13.6334"
                          x1="0.33996"></line>
                    <line stroke-width="2" stroke="white" y2="13" x2="39" y1="8" x1="39"></line>
                </svg>
                Back
            </a>

            <div class="btn button-prev">
                <ion-icon name="caret-back-outline"></ion-icon><span class="btn-border"></span>
            </div>
            <div class="btn button-next">
                <ion-icon name="caret-forward-outline"></ion-icon><span class="btn-border"></span>
            </div>
            <a asp-controller="SortAlgorithm" asp-action="SizeArray" class="button" data-text="Awesome">
                <span class="actual-text">try it</span>
                <span aria-hidden="true" class="front-text">tryit  </span>
            </a>
        </nav>

    </div>

    <div id="particles-js"></div>


    <script src="https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.5.1/js/swiper.min.js"></script>
    <script src='https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js'></script>
    <script src="https://cdn.jsdelivr.net/npm/ionicons@7.2.2/dist/esm/ionicons.min.js"></script>
    <script src="https://unpkg.com/ionicons@latest/dist/ionicons.js"></script>
    <script src="~/js/SortAlgorthm.js"></script>

</body>
</html>
