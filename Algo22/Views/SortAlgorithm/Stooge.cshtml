<html>


<head>
    <link href="~/css/Allalgo.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.5.1/css/swiper.min.css">
    <link href="https://cdn.jsdelivr.net/npm/ionicons@7.2.2/dist/collection/components/icon/icon.min.css
" rel="stylesheet">
</head>



<body>

    <div class="*">
        <h1>Stooge Sort</h1>
    </div>
    <div class="swiper">
        <div class="swiper-wrapper">
            <div class="swiper-slide">
                <div class="content">
                    <h1>The Gnome Sort </h1>

                    <p>

                        Stooge sort serves as a fascinating example of a non-traditional sorting algorithm,
                        demonstrating the value of
                        creative thinking in computer science. However,
                        its impracticality and limitations make it unsuitable for actual use.
                        Its true value lies in its educational potential and the insights it offers into algorithm
                        design and performance analysis.
                    </p>

                </div>

            </div>

            <div class="swiper-slide">
                <div class="content">
                    <h1>Code :</h1>
                    <div class="content">


                        <div class="card">
                            <div class="header">
                                <div class="top">
                                    <div class="circle">
                                        <span class="red circle2"></span>
                                    </div>
                                    <div class="circle">
                                        <span class="yellow circle2"></span>
                                    </div>
                                    <div class="circle">
                                        <span class="green circle2"></span>
                                    </div>
                                    <div class="title">
                                        <p id="title2">Stooge Sort Code</p>
                                    </div>
                                </div>
                            </div>
                            <div class="code-container">
                                <textarea readonly="" name="code" id="code" class="area">
public class StoogeSort {
public static void main(String[] args) {
   int[] array = {8, 3, 12, 4, 6, 11, 15, 14, 7, 9};
   System.out.println("Original Array:");
   printArray(array);
   stoogeSort(array, 0, array.length - 1);
   System.out.println("\nSorted Array:");
        printArray(array);
    }
static void stoogeSort(int arr[], int low, int high) {
        if (low >= high) {
            return;
        }

        if (arr[low] > arr[high]) {
            swap(arr, low, high);
        }

        if (high - low + 1 > 2) {
            int third = (high - low + 1) / 3;

            stoogeSort(arr, low, high - third);
            stoogeSort(arr, low + third, high);
            stoogeSort(arr, low, high - third);
        }
    }

static void swap(int arr[], int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

static void printArray(int arr[]) {
        int n = arr.length;
        for (int i = 0; i < n; ++i)
            System.out.print(arr[i] + " ");
        System.out.println();
    }
}
</textarea>
                            </div>
                        </div>

                    </div>
                </div>
                <div class="content">
                    <h1>Pseudocode:</h1>
                    <div class="card">
                        <div class="header">
                            <div class="top">
                                <div class="circle">
                                    <span class="red circle2"></span>
                                </div>
                                <div class="circle">
                                    <span class="yellow circle2"></span>
                                </div>
                                <div class="circle">
                                    <span class="green circle2"></span>
                                </div>
                                <div class="title">
                                    <p id="title2">Stooge Sort Pseudocode</p>
                                </div>
                            </div>
                        </div>
                        <div class="code-container">
                            <textarea readonly="" name="code" id="code" class="area">
STOOGE_SORT
1. stooge_sort(A, l, r)
2. if (A[l] > A[r]):
3. swap(A[l], A[r])
4. end if
5. if (r - l <= 2):
6. return
7. end if
8. t = int((r - l) / 3)
9. stooge_sort(A, l, r - t)
10. stooge_sort(A, l + t, r)
11. stooge_sort(A, l, r - t)
12. end stooge_sort

}</textarea>
                        </div>
                    </div>


                </div>
            </div>
            <div class="swiper-slide">
                <div class="content">
                    <h1>How To Arrange Step By Step</h1>
                    <p>
                        1. Divide and Conquer:
                        Start with your list of unsorted elements.
                        Recursively divide the list into halves until you have individual elements (similar to splitting a rope in half repeatedly until you have single strands).
                        2. Lazy Comparisons:

                        For each sub-list of two elements:
                        Compare the first element to the second.
                        If they are in order, do nothing ("I'm feelin' too lazy today, no swap needed").
                        If they are not in order, swap them ("Fine, I'll switch places, but just this once").
                        3. Reassemble and Repeat:

                        Merge the sub-lists back together, maintaining the "lazily" sorted order from each sub-list.
                        Repeat steps 1-3 until the entire list is a single sub-list, meaning it's fully sorted (according to the lazy comparisons).
                    </p>

                </div>



            </div>

            <div class="swiper-slide">
                <div class="content">
                    <h1>Advanteg :</h1>
                    <p class="ulAdv" style="color : #06ff06;">
                        ✅Simple and easy to understand:
                        Stooge sort relies on basic comparisons and swaps, making it easily approachable for beginners. Its recursive nature offers an introduction to recursion without complex constructs.
                    </p>
                    <p class="ulAdv" style="color : #06ff06;">
                        ✅Educational value:
                        By analyzing its performance and limitations, students can gain insights into the trade-offs between different sorting algorithms, the importance of time complexity, and the benefits of more efficient approaches.
                    </p>
                    <p class="ulAdv" style="color : #06ff06;">
                        ✅ Humorous and memorable: The unusual logic and "lazy" nature of Stooge sort, where elements are repeatedly checked and moved, can add a touch of humor and memorability to learning about sorting algorithms.
                        Parallelization potential: Although generally impractical, its reliance on independent comparisons for sub-lists opens the door to potential parallelization for future optimization attempts.
                    </p>

                </div>
                <div class="content">
                    <h1>Disadvanteg :</h1>
                    <p class="uldis" style="color:#ff6548;">
                        ❌ Extremely slow:
                        Stooge sort has a terrible time complexity (nearly cubic), making it significantly slower than efficient algorithms like merge sort or quicksort. Its real-world application is impractical due to performance limitations.
                    </p>
                    <p class="uldis" style="color:#ff6548;">

                        ❌ Unpredictable:
                        It relies on the operating system's scheduling for thread wake-up, which can introduce uncertainties in the sorting order compared to deterministic algorithms.
                    </p>
                    <p class="uldis" style="color:#ff6548;">
                        ❌Inefficient use of resources:
                        Creating and managing multiple threads or processes for each element incurs significant overhead, making it resource-intensive and impractical for large datasets.

                    </p>

                </div>


            </div>
        </div>


        <nav class="nav-carousel">

            <a class="enter-a">
                <svg xmlns="http://www.w3.org/2000/svg"
                     fill="none"
                     viewBox="0 0 40 27"
                     class="arrow">
                    <line stroke-width="2" stroke="white" y2="14" x2="40" y1="14" x1="1"></line>
                    <line stroke-width="2"
                          stroke="white"
                          y2="1.41537"
                          x2="10.4324"
                          y1="14.2433"
                          x1="1.18869"></line>
                    <line stroke-width="2"
                          stroke="white"
                          y2="13.6007"
                          x2="1.20055"
                          y1="26.2411"
                          x1="10.699"></line>
                    <line stroke="white"
                          y2="14.3133"
                          x2="1.07325"
                          y1="13.6334"
                          x1="0.33996"></line>
                    <line stroke-width="2" stroke="white" y2="13" x2="39" y1="8" x1="39"></line>
                </svg>
                Back
            </a>

            <div class="btn button-prev">
                <ion-icon name="caret-back-outline"></ion-icon><span class="btn-border"></span>
            </div>
            <div class="btn button-next">
                <ion-icon name="caret-forward-outline"></ion-icon><span class="btn-border"></span>
            </div>
            <a asp-controller="SortAlgorithm" asp-action="SizeArray" class="button" data-text="Awesome">
                <span class="actual-text">try it</span>
                <span aria-hidden="true" class="front-text">tryit  </span>
            </a>
        </nav>

    </div>

    <div id="particles-js"></div>




    <script src="https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.5.1/js/swiper.min.js"></script>
    <script src='https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js'></script>
    <script src="
https://cdn.jsdelivr.net/npm/ionicons@7.2.2/dist/esm/ionicons.min.js
"></script>
    <script src="https://unpkg.com/ionicons@latest/dist/ionicons.js"></script>
    <script src="~/js/SortAlgorthm.js"></script>

</body>
</html>