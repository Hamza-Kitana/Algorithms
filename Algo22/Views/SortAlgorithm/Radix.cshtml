<html>


<head>
    <link href="~/css/Allalgo.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.5.1/css/swiper.min.css">
    <link href="https://cdn.jsdelivr.net/npm/ionicons@7.2.2/dist/collection/components/icon/icon.min.css
" rel="stylesheet">
</head>



<body>

    <div class="*">
        <h1>Radix Sort</h1>
    </div>
    <div class="swiper">
        <div class="swiper-wrapper">
            <div class="swiper-slide">
                <div class="content">
                    <h1>The Radix Sort </h1>

                    <p>

                        Radix sort is a non-comparative
                        sorting algorithm that sorts elements by grouping digits
                        of the same place value together.
                        It's particularly efficient for sorting integers and fixed-length strings.
                    </p>

                </div>

            </div>

            <div class="swiper-slide">
                <div class="content">
                    <h1>Code :</h1>
                    <div class="content">


                        <div class="card">
                            <div class="header">
                                <div class="top">
                                    <div class="circle">
                                        <span class="red circle2"></span>
                                    </div>
                                    <div class="circle">
                                        <span class="yellow circle2"></span>
                                    </div>
                                    <div class="circle">
                                        <span class="green circle2"></span>
                                    </div>
                                    <div class="title">
                                        <p id="title2">Cocktail Sort Code</p>
                                    </div>
                                </div>
                            </div>
                            <div class="code-container">
                                <textarea readonly="" name="code" id="code" class="area">
public class RadixSort {
public static void main(String[] args) {
int[] array = {170, 45, 75, 90, 802, 24, 2, 66};
 System.out.println("Original Array:");
  printArray(array);
  radixSort(array);
 System.out.println("\nSorted Array:");
        printArray(array);
    }
static void radixSort(int arr[]) {
        int max = getMax(arr);
        for (int exp = 1; max / exp > 0; exp *= 10) {
        countingSort(arr, exp);
        }
    }
static void countingSort(int arr[], int exp) {
        int n = arr.length;
        int output[] = new int[n];
        int count[] = new int[10];
        Arrays.fill(count, 0);
        for (int i = 0; i < n; i++) {
         count[(arr[i] / exp) % 10]++;
        }

        for (int i = 1; i < 10; i++) {
            count[i] += count[i - 1];
        }

        for (int i = n - 1; i >= 0; i--) {
            output[count[(arr[i] / exp) % 10] - 1] = arr[i];
            count[(arr[i] / exp) % 10]--;
        }

        System.arraycopy(output, 0, arr, 0, n);
    }

static int getMax(int arr[]) {
        int max = arr[0];
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] > max) {
                max = arr[i];
            }
        }
        return max;
    }

static void printArray(int arr[]) {
        int n = arr.length;
        for (int i = 0; i < n; ++i)
            System.out.print(arr[i] + " ");
        System.out.println();
    }
}

}</textarea>
                            </div>
                        </div>

                    </div>
                </div>
                <div class="content">
                    <h1>Pseudocode:</h1>
                    <div class="card">
                        <div class="header">
                            <div class="top">
                                <div class="circle">
                                    <span class="red circle2"></span>
                                </div>
                                <div class="circle">
                                    <span class="yellow circle2"></span>
                                </div>
                                <div class="circle">
                                    <span class="green circle2"></span>
                                </div>
                                <div class="title">
                                    <p id="title2">Cocktail Sort Pseudocode</p>
                                </div>
                            </div>
                        </div>
                        <div class="code-container">
                            <textarea readonly="" name="code" id="code" class="area">
RADIX_SORT 
1. radix_sort(A, d)
2. n = len(A)
3. buckets = new array of size 10
4. output = new array of size n
5. for i in range from 0 to d - 1:
6. for j in range from 0 to n - 1:
7. index = (A[j] // 10^i) % 10
8. buckets[index].append(A[j])
9. idx = 0
10. for bucket in buckets:
11. for element in bucket:
12. output[idx] = element<
13. idx += 1
14. buckets = output
15. output = new array of size n
16. end for
17. end for
18. end radix_sort

}</textarea>
                        </div>
                    </div>


                </div>
            </div>

            <div class="swiper-slide">
                <div class="content">
                    <h1>How To Arrange Step By Step</h1>
                    <p>
                        Identify the maximum number of digits: Determine the maximum number of digits (or characters) in the largest element of the input list. This sets the number of passes needed for sorting.

                        Iterate through digits: For each digit position, starting from the least significant digit (LSD) and moving towards the most significant digit (MSD):

                        Use a stable sorting algorithm (like counting sort or bucket sort) to group elements based on the digit in that position.
                        Reorder the elements in the list based on the sorted groups.
                        Repeat for each digit: Continue this process for each digit position until all digits have been processed. The final arrangement will be a fully sorted list.
                    </p>

                </div>
                <div class="content">

                    <p>
                        <img src="~/lib/jquery-validation-unobtrusive/gif/radix sort (msd).gif" width="450px" height="350px" />
                    </p>

                </div>


            </div>

            <div class="swiper-slide">
                <div class="content">
                    <h1>Advanteg :</h1>
                    <p class="ulAdv" style="color : #06ff06;">
                        ✅Very efficient for integers and fixed-length strings:
                        Often outperforms comparison-based algorithms for these data types.
                    </p>
                    <p class="ulAdv" style="color : #06ff06;">
                        ✅Linear time complexity:
                        Can be faster than algorithms with O(n log n) complexity for large datasets.
                    </p>
                    <p class="ulAdv" style="color : #06ff06;">
                        ✅ Stable:
                        Maintains the original order of equal elements.
                    </p>




                </div>
                <div class="content">
                    <h1>Disadvanteg :</h1>
                    <p class="uldis" style="color:#ff6548;">
                        ❌Less efficient for floating-point numbers:
                        Not ideal for sorting decimal values due to varying precision.
                    </p>
                    <p class="uldis" style="color:#ff6548;">
                        ❌Requires knowledge of the radix:
                        Needs to know the base of the numbers to determine the number of digits.
                    </p>
                    <p class="uldis" style="color:#ff6548;">
                        ❌Overhead for in-place implementations:
                        In-place versions might have additional overhead compared to out-of-place implementations.
                    </p>

                </div>


            </div>
        </div>


        <nav class="nav-carousel">

            <a class="enter-a">
                <svg xmlns="http://www.w3.org/2000/svg"
                     fill="none"
                     viewBox="0 0 40 27"
                     class="arrow">
                    <line stroke-width="2" stroke="white" y2="14" x2="40" y1="14" x1="1"></line>
                    <line stroke-width="2"
                          stroke="white"
                          y2="1.41537"
                          x2="10.4324"
                          y1="14.2433"
                          x1="1.18869"></line>
                    <line stroke-width="2"
                          stroke="white"
                          y2="13.6007"
                          x2="1.20055"
                          y1="26.2411"
                          x1="10.699"></line>
                    <line stroke="white"
                          y2="14.3133"
                          x2="1.07325"
                          y1="13.6334"
                          x1="0.33996"></line>
                    <line stroke-width="2" stroke="white" y2="13" x2="39" y1="8" x1="39"></line>
                </svg>
                Back
            </a>

            <div class="btn button-prev">
                <ion-icon name="caret-back-outline"></ion-icon><span class="btn-border"></span>
            </div>
            <div class="btn button-next">
                <ion-icon name="caret-forward-outline"></ion-icon><span class="btn-border"></span>
            </div>
            <a asp-controller="SortAlgorithm" asp-action="SizeArray" class="button" data-text="Awesome">
                <span class="actual-text">try it</span>
                <span aria-hidden="true" class="front-text">tryit  </span>
            </a>
        </nav>

    </div>

    <div id="particles-js"></div>




    <script src="https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.5.1/js/swiper.min.js"></script>
    <script src='https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js'></script>
    <script src="
https://cdn.jsdelivr.net/npm/ionicons@7.2.2/dist/esm/ionicons.min.js
"></script>
    <script src="https://unpkg.com/ionicons@latest/dist/ionicons.js"></script>
    <script src="~/js/SortAlgorthm.js"></script>

</body>
</html>